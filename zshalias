#######################
#
# Utitlities ################
#
# show all processes running on port XYZ
function port {
	if [[ $1 != "" ]] ; then
		lsof -i :${1#.} | grep LISTEN
	else
		echo "Please provide a port"
	fi 
}
alias top="htop"
# better ls -G -A=include hidden, but not . and ..; -F=/ after dir to mark it as such
alias ls='ls -GAF ${colorflag}'
# list all files in long format
alias ll='ls -lAF ${colorflag}'
# list directories only
alias ld='ls -lF ${colorflag} | grep "^d"'
# Enable aliases to be sudoâ€™ed
alias sudo='sudo '
# open file or folder in vs code
function vs {
	if [[ $1 != "" ]] ; then
		code ${1}
	else
		code .
	fi 
}
#######################
#
# GIT ################
#
alias st="git status"
alias b="git branch"
alias ck="git checkout"
alias add="git add"
alias add.="git add ."
alias pull="git pull"
alias rebase="git rebase -i"
alias continue="git rebase --continue"
alias abort="git rebase --abort"
alias reset="git reset -p"
alias log="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(Normal)%s%Creset %C(white)(%cr) %Creset' --abbrev-commit"
# git checkout -m with required message
function cm {
	msg=${*:1}
	if [[ -z "$msg" ]]; then
	read -e -p "Enter a commit message: " message
		msg=$message
	fi
	git commit -m "$msg"
}
# git push with some additions
function push {
	current_branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  if [[ $1 == "tags" || $1 == "tag"  || $1 == "--tags" ]]; then
    git push && git push --tags origin $current_branch
  elif [[ ($1 == "-f" && ($2 == "tag" || $2 == "tags")) ]]; then
    git push -f --tags origin $current_branch
  elif [[ ($1 == "tag" || $1 == "tags") && $2 == "-f" ]]; then
    git push -f --tags origin $current_branch
	elif [[ ! -z "$1" ]]; then
    git push $1
  else
    git push origin $current_branch
  fi
}
# delete branch
function : {
	if [[ ! -z "$1" ]]; then
    git push origin :$1
    if [[ ($2 == "-b") ]]; then
      git branch -D $1
    fi
  fi
}
# replace diff with diff so fancy
function diff {
	if [[ ! -z "$1" ]]; then
		git diff --color $1 | diff-so-fancy
	else
		git diff --color | diff-so-fancy
	fi
}
# git clean -f && git checkout -- ${dir}
function clean {
	default_dir="public"
	if [[ $1 == "" ]] ; then
		clean_dir=${default_dir}
	else
		clean_dir=${1}
	fi
	git clean -f
	git checkout -- ${clean_dir}
}
#######################
#
# HOMEBREW ################
#
# brew update
function brew {
	if [[ $1 == "update" ]] ; then
		var_brew="/usr/local/bin/brew"
		echo "${ORANGE}Updating brew...${RESET}"
		$var_brew update
		echo "${ORANGE}Upgrading formulas...${RESET}"
		$var_brew upgrade
		echo "${ORANGE}Cleaning up...${RESET}"
		$var_brew cleanup
		echo "${ORANGE}The doctor says...${RESET}"
		$var_brew doctor
	else
		/usr/local/bin/brew "$@"
	fi
}